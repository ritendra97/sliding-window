//Minimum Window Substring

// TC->O(n*k)
// SP->)(k)
import java.util.*;
public class StringProblem {


    public static String minWindow(String s, String t) {
        if(t.length() == 0){
            return "";
        }
        int max_length=Integer.MAX_VALUE;
        
        int freq1[] = new int[128];
        int freq2[] =  new int[128];
        
        for(char c:t.toCharArray()) {
        	
        	freq2[c]++;
        };
        
        int start = -1, end = -1;
        for(int i = 0, j = 0; j < s.length(); j++){
            
            freq1[s.charAt(j)]++;  
            
            
            while(isEnough(freq1, freq2)){
            
            	int len = (j-i)+1;
            	if(max_length>len) {
            		
            		max_length=len;
            		start = i;
            		end = j;
            	}
                freq1[s.charAt(i)]--;
                i++;
            }
        } 
        return start == -1 ? "" : s.substring(start, end + 1);
    }
    
    private static boolean isEnough(int freq1[], int freq2[]){
        for(int i = 0; i < 128; i++){
            if(freq1[i] < freq2[i]){
                return false;
            }
        }
        return true;
    }
	public static void main(String[] args) {
		
		String s = "ADOBECODEBANC";
		String t = "ABC";
		
	    System.out.println(minWindow(s,t));
	}
}
